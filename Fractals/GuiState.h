#pragma once
#include "WithSmartPtr.h"

class FractalWindow;

///////////////////////////////////////////////////////////////////////////////
/// \brief Base class for game state.
///////////////////////////////////////////////////////////////////////////////
class GuiState : public WithSmartPtr<GuiState>
{
public:
	///////////////////////////////////////////////////////////////////////////
	/// Constructor.
	///////////////////////////////////////////////////////////////////////////
	GuiState(FractalWindow* window = nullptr);

	///////////////////////////////////////////////////////////////////////////
	/// Destructor.
	///////////////////////////////////////////////////////////////////////////
	virtual ~GuiState(void);

	///////////////////////////////////////////////////////////////////////////
	/// Initializes the game state.
	///////////////////////////////////////////////////////////////////////////
	virtual void init() {};

	///////////////////////////////////////////////////////////////////////////
	/// Frees the game state.
	///////////////////////////////////////////////////////////////////////////
	virtual void free() {};

	///////////////////////////////////////////////////////////////////////////
	/// Pauses the game state.
	///////////////////////////////////////////////////////////////////////////
	virtual void pause() { myIsPaused = true; }

	///////////////////////////////////////////////////////////////////////////
	/// Resumes the game state.
	///////////////////////////////////////////////////////////////////////////
	virtual void resume() { myIsPaused = false; }

	///////////////////////////////////////////////////////////////////////////
	/// Updates the game state.
	///////////////////////////////////////////////////////////////////////////
	//virtual void update() = 0;

	///////////////////////////////////////////////////////////////////////////
	/// Draws the game state.
	///////////////////////////////////////////////////////////////////////////
	//virtual void draw();

	///////////////////////////////////////////////////////////////////////////
	/// Indicates whether the state is paused or not.
	///
	/// \return true if the state is currently paused, false otherwise.
	///////////////////////////////////////////////////////////////////////////
	bool isPaused() const { return myIsPaused; }

	void setFractalWindow(FractalWindow* window);

protected:
	bool myIsPaused;

	FractalWindow* myWindow;
};
